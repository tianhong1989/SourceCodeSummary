一.	优先队列
	/**
	 * 给定一个非空的整数数组，返回其中出现频率前 k 高的元素。
	 * 示例 1:
	 * 输入: nums = [1,1,1,2,2,3], k = 2
	 * 输出: [1,2]
	 * 示例 2:
	 * 输入: nums = [1], k = 1
	 * 输出: [1]
	 * 说明：
	 * 你可以假设给定的 k 总是合理的，且 1 ≤ k ≤ 数组中不相同的元素的个数。
	 * 你的算法的时间复杂度必须优于 O(n log n) , n 是数组的大小。
	 * 来源：力扣（LeetCode）
	 */
		优先队列
		public List<Integer> topKFrequent(int[] nums, int k) {
			final HashMap<Integer, Integer> map = new HashMap<>();
			//用map统计各个元素都有多少个
			for (int num : nums) {
				if (map.containsKey(num)) {
					map.put(num, map.get(num) + 1);
				} else {
					map.put(num, 1);
				}
			}
			//用优先队列获得最多的前K个
			PriorityQueue<Integer> queue = new PriorityQueue<>(new Comparator<Integer>() {
				public int compare(Integer a, Integer b) {
					// 出现次数少的在前
					return map.get(a) - map.get(b);
				}
			});

			for (int key : map.keySet()) {
				// 控制队列元素数量
				if (queue.size() < k) {
					queue.add(key);
					continue;
				}

				// 队列中元素达到 K 值 ，去除最小值比较
				int small = queue.peek();
				if (map.get(small) < map.get(key)) {
					queue.poll();
					queue.add(key);
				}
			}
			return new ArrayList<Integer>(queue);
		}
二.	图