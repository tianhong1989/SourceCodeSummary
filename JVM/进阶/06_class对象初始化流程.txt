作用：	JVM加载class过程
一.	流程
	装载、链接（验证、准备、解析）、初始化
二.	装载
	1.	什么是装载
		Java 虚拟机查找 .class 文件并生成字节流，然后根据字节流创建 java.lang.Class 对象的过程
		1>	获取.class文件（jar，zip，网络字节流），生成二进制字节流
		2>	把class文件各个部分解析为jvm内部的数据结构，并存储在方法区
		3>	使用时候，外部访问类的接口就是这个class类对象
	2.	加载时机
		jvm不会全部马上加载进内存，具体加载方式有2种：
			隐式装载：new的方式生成的对象
			显式装载：Class.forName的方式生成的对象
三.	链接
	1.	验证
		文件格式检验：检验字节流是否符合 class 文件格式的规范，并且能被当前版本的虚拟机处理。 
		元数据检验：对字节码描述的信息进行语义分析，以保证其描述的内容符合 Java 语言规范的要求
		字节码检验：通过数据流和控制流分析，确定程序语义是合法、符合逻辑的。 
		符号引用检验：符号引用检验可以看作是对类自身以外（常量池中的各种符号引用）的信息进行匹配性校验
		验证是咧:
			修改了父类的常量池，结果发现竟然没报错
	2.	准备
		类变量分配内存，并赋默认值0  static xxx, 静态常量赋值 static final 100
		赋值0的如下：
			基本类型（int、long、short、char、byte、boolean、float、double）的默认值为 0；
			引用类型默认值是 null；
	3.	解析
		把常量池中的符号引用(常量池中的类、接口名、字段名、方法名等)转换为直接引用，也就是具体的内存地址
		
四.	初始化
	1.	初始化时机
		虚拟机启动时，初始化包含main方法的主类；
		遇到new指令创建对象实例时，如果目标对象类没有被初始化则进行初始化操作；
		当遇到访问静态方法或者静态字段的指令时，如果目标对象类没有被初始化则进行初始化操作；
		子类的初始化过程如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化；
		使用反射 API 进行反射调用时，如果类没有进行过初始化则需要先触发其初始化；
		第一次调用 java.lang.invoke.MethodHandle 实例时，需要初始化 MethodHandle 指向方法所在的类
	2.	初始化类变量
		初始化与类相关的静态赋值语句和静态语句
		当new对象的时候，才会执行非静态代码块
	3.	被动引用
		子类调用父类的静态字段，只会初始化父类，不会初始化子类
	4.	class初始化和对象的创建顺序
		静态变量/静态代码块->普通代码块->构造函数
		1.	父类静态变量和静态代码块；
		2.	子类静态变量和静态代码块；
		3.	父类普通成员变量和普通代码块；
		4.	父类的构造函数;
		5. 	子类普通成员变量和普通代码块；
		6. 	子类的构造函数。
	
五.	总结
	装载：指查找字节流，并根据此字节流创建类的过程。装载过程成功的标志就是在方法区中成功创建了类所对应的 Class 对象。
	链接：指验证创建的类，并将其解析到 JVM 中使之能够被 JVM 执行
	初始化：则是将标记为 static 的字段进行赋值，并且执行 static 标记的代码语句 。
