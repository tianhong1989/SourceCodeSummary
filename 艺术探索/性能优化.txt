一.Android的性能优化方法
		主要介绍一下布局优化，绘制优化，内存泄漏优化，响应速度优化，ListView优化，Bitmap优化，
		线程优化以及性能建议
	1.布局优化
		删除布局中的无用控件
		其次选择性能较低的ViewGroup
		如果RelativeLayout和LinearLayout都有，就选择LinearLayout，因为RelativeLayout的功能比较复杂
		
		标签优化：
		< include >
			< include >标签只支持android:layout开头的属性，比如高宽，其他的属性是不支持的
			如果< include >指定了这个id属性，同时被包含的不文件的根目录也指定了id属性，那么< include >指定的id属性为准
		< merge >
			< merge >标签一般和< include >一起使用从而减少布局的层级，会去掉一层布局
		ViewStub
			高宽都是0，按需加载，通过setVisibility或者inflate方式加载
	2.绘制优化
		View的onDraw方法，不要创建新的对象，不要执行耗时操作
		view的绘制要保证60fps是最佳的，这就要求绘制时间不能超过16ms（16ns = 1000/60）
	3.内存泄漏优化
		1 静态变量导致的内存泄漏
			及时释放静态代码
		2 单例模式导致的内存泄漏
			释放占据activity的单列
		3 属性动画所导致的内存泄漏
			onDestroy 关闭动画
		4 响应速度优化和ANR日志分析
			主线程执行太多耗时操作，容易出现ANR,Activity如果5秒钟之内无法响应屏幕触摸事件或者键盘
			输入事件就会出现ANR,系统会在 data/anr目录下创建一个文件 traces.txt
		5 ListView和Bitmap优化
			避免在getView中执行耗时操作，
			根据列表的滑动状态来控制任务的执行频率
			Bitmap优化主要是裁剪，压缩
		6 线程优化
			采用线程池，避免存在大量的Thread，线程池可以重用内部的线程从而避免很多不必要的性能开销
		7.一些性能的建议
			避免创建过多的对象
			不要过多使用枚举，枚举暂用的空间要比整型大
			常量请使用static final来修饰
			使用一些Android特有的数据结构，比如SparseArray和Pair等，他们都具有更好的性能
			适当使用软引用和弱引用
			采用内存缓存和磁盘缓存
			尽量采用静态内部类，这样避免潜在的由于内部类导致的内存泄漏
			
二.内存泄漏分析之MAT工具
		histogram和dominator tree
		选中它，右键path to GC Roots-> exclude wake/soft references
			可以看到是xxx引用了xxx导致内存泄漏
			
		dominator tree 是可以使用搜索功能，直接搜索类名，如果activity存在多个就说明有内存泄漏

三.提高程序的可维护性
	代码风格、代码的层次性和单一职责原则、面向扩展编程程以及设计模式
	1>代码风格
		(1)命名要规范，
		(2)代码的排版上需要留出合理的空白来区分不同的代码块，
		(3)仅为非常关键的代码添加注释，其他地方不写注释
	2>层次性
		就是每个类，方法都执行单一执行原则
	3>扩展性和设计模式
		主要根据开发人员经验类匹配
		