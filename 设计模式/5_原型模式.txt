一.	前言
	原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模
	式属于创建型模式，它提供了一种创建对象的最佳方式
	
	这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较
	大时，则采用这种模式。例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以
	缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用

二.	使用场景
	1、资源优化场景。
	2、类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等。
	3、性能和安全要求的场景。
	4、通过 new 产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。
	5、一个对象多个修改者的场景。
	6、一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用。
	7、在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过 clone 的方法创建一个对象，然后由工厂方法提供给调用者。原型模式已经与 Java 融为浑然一体，大家可以随手拿来使用。

三.	Android中的使用（clone源码）
	原型模式中的拷贝分为"浅拷贝"和"深拷贝":
		浅拷贝: 对值类型的成员变量进行值的复制,对引用类型的成员变量只复制引用,不复制引用的对象.
		深拷贝: 对值类型的成员变量进行值的复制,对引用类型的成员变量也进行引用对象的复制.
		
	在子类强制转换的时候也可以使用此模式，当子类做同一件事情的时候